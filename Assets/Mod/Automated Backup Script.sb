Sub ABS_VOID
  Function_Command = Function_Command 
  Function_UI_Add = Function_UI_Add 
  Function_RunMod_Parser = Function_RunMod_Parser
  Function_Command = Function_Command
  Function_Query = Function_Query
  listview = listview 
  UIx = UIx 
EndSub 

Sub ABS_UI
  LDCall.Function5( Function_UI_Add , "Menu" , "Mod " ,"","Main","")
  LDCall.Function5( Function_UI_Add , "Menu" , "SB Backup Script" ,"","Mod ","")
  LDCall.Function5( Function_UI_Add , "Menu" , "Scan " ,Function_RunMod_Parser ,"SB Backup Script","Automated Backup Script.ABS_Main")
  LDCall.Function5( Function_UI_Add , "Menu" , "View " ,Function_RunMod_Parser ,"SB Backup Script","Automated Backup Script.ABS_Mod_View_Results_UI")
EndSub 

Sub ABS_Mod_View_Results_UI
  GraphicsWindow.DrawText( UIx + 100 , (270+20) + 400, "ABS Restore /Open Settings")
  GraphicsWindow.DrawText( UIx + 20,   (300+20) + 400,"ID:")
  
  ABS_RestoreIDTB= Controls.AddTextBox(UIx + 100,(300+20) + 400)
  
  ABS_RestoreButton = Controls.AddButton("RESTORE",UIx + 10,350 + 400)
  ABS_OpenSBbutton = Controls.AddButton("OPEN IN SB",UIx + 10,380 + 400)
  
  LDCall.Function5( Function_UI_Add , "Register" , ABS_RestoreButton ,Function_RunMod_Parser ,"SB Backup Script","Automated Backup Script.ABS_View_Handler")
  LDCall.Function5( Function_UI_Add , "Register" , ABS_OpenSBbutton ,Function_RunMod_Parser ,"SB Backup Script","Automated Backup Script.ABS_View_Handler")
  
  Controls.SetSize(ABS_RestoreButton,290,25)
  Controls.SetSize(ABS_OpenSBbutton,290,25)
EndSub

Sub ABS_View_Handler
  LastClickedButton = Controls.LastClickedButton 
  ABS_RHG_ID = Controls.GetTextBoxText(ABS_RestoreIDTB) 
  If LastClickedButton = ABS_RestoreButton And LDUtilities.IsNumber(ABS_RHG_ID) = "True" Then 
    Return = LDCall.Function5(Function_Query ,"Select CNTS,Title from Files WHERE ID ='"+ABS_RHG_ID+"';" ,"","True", LDFile.UserName , "ABS MOD Restore Function"  )
    ' LDDataBase.Query(database,"Select CNTS,Title from Files WHERE ID ='"+RHG_ID+"';","","True")
    RestoreCnts = Return[1]["CNTS"]
    RHG_Title = Return[1]["Title"]
    '  If  Array.GetItemCount(Return) = 1 Then 
    '    RHG_Title = LDDataBase.Query(database,"Select Title from Files WHERE ID ='"+RHG_ID+"';","","True")
    GraphicsWindow.ShowMessage("Save path for "+RHG_Title  ,"Save Path") 
    SaveLocation =  LDDialogs.SaveFile("sb","C:\Users\"+LDFile.UserName+"\Desktop\")
    File.WriteContents(SaveLocation, RestoreCnts ) 
    If LDDialogs.Confirm("Do you wish to launch " + RHG_Title +"?","Open File") = "Yes" Then 
      LDProcess.Start(SaveLocation,"") 
      '    EndIf
      
    EndIf 
  ElseIf LastClickedButton = ABS_OpenSBbutton And LDUtilities.IsNumber(ABS_RHG_ID) = "True" Then
    Return = LDCall.Function5(Function_Query ,"Select Path from Files WHERE ID ='"+ABS_RHG_ID+"';" ,"","True", LDFile.UserName , "ABS MOD Open Function"  )
    Return =  Return[1]["Path"]
    If LDFile.Exists(Return) = "True" Then 
      LDProcess.Start(Return,"")
    Else 
      GraphicsWindow.ShowMessage("The file you wish to open does not exist on this computer at the last indexed location. Please use restore if you are trying to get a copy of the program.","Open Error")
    EndIf 
  Else 
    If debug_mode = 0 Then
      TextWindow.WriteLine("Force Debug : ON")
      debug_mode = 1 
    EndIf
    TextWindow.WriteLine("ABS MOD Unkown Arg : "+  Controls.LastClickedButton )
  EndIf 
EndSub

Sub ABS_Main
  TextWindow.WriteLine("ABS ")
  DirectoryList = "Dir"
  FileList = "File" 
  ABS_Setup()
  ABS_New_Scan()
EndSub

Sub ABS_Setup
  ScanPath = LDDialogs.GetFolder("C:\Users\"+ LDFile.UserName+"\")
  LDList.Add(DirectoryList,ScanPath )'Gets Initial Directory 
  ABS_Generate_BlackList() 'Gets List of All Folders the Program Should not Scan
  database = database
  
  creatationofdatabsecmd = "DROP TABLE IF EXISTS Files; Create Table Files"
  creatationofdatabsecmd = creatationofdatabsecmd + "(ID Integer,Title Text,Path Text,MD5 Text,Last_Change Text,Sizes Integer,Lines Integer,CNTS Text);VACUUM;Create VIEW Files_View AS Select ID,Title,Path,MD5,Sizes,Lines FROM Files;"
  LDCall.Function4( Function_Command , database , creatationofdatabsecmd , LDFile.UserName , "ABS Creation")
  creatationofdatabsecmd = "" 
EndSub 

Sub ABS_New_Scan
  Max = LDList.Count(DirectoryList) + 1 
  ABS_Get_Folder()'Gets all Sub Folders 
  ABS_Get_Files() 'Get all Files in sub Folders
  ABS_Sort() 'Fetch Data and commit data to a Database 
EndSub

Sub ABS_Get_Folder
  
  TextWindow.Title = "Automated SB Backup" 
  TextWindow.ForegroundColor = "WHITE"
  TextWindow.WriteLine("FOLDER")
  TextWindow.ForegroundColor= "GREEN"
  For i = 1 To Max
    DirReturn = File.GetDirectories(LDList.GetAt(DirectoryList,i) )
    For ii = 1 To Array.GetItemCount(DirReturn)
      ABS_BlackList()
      IF BlackListValue = 0 Then 
        LDList.Add(DirectoryList, DirReturn[ii] ) 
        TextWindow.WriteLine(DirReturn[ii]) 
      EndIF 
    EndFor 
    
    Max = LDList.Count(DirectoryList) 
    TextWindow.ForegroundColor = "WHITE"
    TextWindow.Clear()
    TextWindow.Write("FOLDER " + "("+i +"/"+Max+")")
    TextWindow.ForegroundColor= "GREEN"
  EndFor 
EndSub

Sub ABS_Get_Files
  TextWindow.ForegroundColor = "WHITE"
  TextWindow.WriteLine("")
  TextWindow.WriteLine("FILE")
  TextWindow.ForegroundColor= "GREEN"
  
  Max = LDList.Count(DirectoryList) 
  For i = 1 To Max
    FileReturn =  File.GetFiles( LDList.GetAt(DirectoryList,i)  )
    TextWindow.WriteLine(LDList.GetAt(DirectoryList,i) )  
    
    For ii = 1 To Array.GetItemCount(FileReturn ) 
      Extension = LDFile.GetExtension(FileReturn[ii])
      TextWindow.WriteLine( FileReturn[ii] ) 
      
      If Extension = "sb" Then 
        LDQueue.Enqueue(FileList,FileReturn[ii] ) 
        TextWindow.ForegroundColor = "WHITE"
        TextWindow.Clear()     
        TextWindow.WriteLine("Searching for Files (" + i + "/" + Max + ")") 
      EndIf 
      
    EndFor 
    
  EndFor 
  
EndSub

Sub ABS_Sort
  ID = 0 
  Max = LDQueue.GetCount(FileList)
  CMD = "" 
  While 0 < Max 
    Comments = 0 
    Path =LDQueue.Dequeue(FileList) 
    ID = ID + 1
    Title = LDFile.GetFile(Path)
    MD5 = LDEncryption.MD5HashFile(Path)
    Change = LDFile.AccessTime(Path)
    Size = LDFile.Size(Path)
    Lines = LDFile.Length(Path)
    CNTS =  File.ReadContents(Path)
    Comments = Array.GetItemCount( LDText.FindAll(CNTS,"'") ) 
    
    If Comments > 0 Then 
      CNTS =  LDText.Replace(CNTS,"'","''")
    EndIf 
    
    CMD = "INSERT INTO FILES (ID,Title,Path,MD5,Last_Change,Sizes,Lines,CNTS) "
    CMD = CMD +" VALUES('"+ ID +"','"+ Title+"','"+ Path +"','"+MD5+"','" + Change+"','"+Size +"','" + Lines +"','"+ CNTS+"');"
    updated = LDCall.Function4(Function_Command , database , CMD , LDFile.UserName , "ABS Mod Script" ) 
    If updated = 0 Then 
      TextWindow.ForegroundColor = "RED"
      TextWindow.WriteLine("Failed to LOAD " + Path) 
      Sound.PlayBellRing()
      TextWindow.Pause()
    Else
      TextWindow.ForegroundColor = "WHITE"
      TextWindow.Clear()
      TextWindow.Write("DB " + "("+ID +"/"+Max+")")
      
    EndIf 
    Max = LDQueue.GetCount(FileList)
    
  EndWhile
  updated= LDDataBase.Command(database,"VACUUM;")
  TextWindow.Clear()
  TextWindow.Hide()
  LDCall.Function5( Function_query ,"Select * From Files_View;", listview , "False" , LDFile.UserName , "ABS MOD SCRIPT")
EndSub 


Sub ABS_Generate_BlackList
  BlackListList[Array.GetItemCount(BlackListList)+1] = "C:\Windows"
  BlackListList[Array.GetItemCount(BlackListList)+1] = "C:\$Windows.~BT"
  BlackListList[Array.GetItemCount(BlackListList)+1] = "C:\ProgramData"
  BlackListList[Array.GetItemCount(BlackListList)+1] = "C:\Program Files"
  BlackListList[Array.GetItemCount(BlackListList)+1] = "C:\Program Files (x86)"
  BlackListList[Array.GetItemCount(BlackListList)+1] = "C:\Users\All Users"
  
  userList =  File.GetDirectories("C:\Users\") 
  For i = 1 To Array.GetItemCount(userList) 
    BlackListList[Array.GetItemCount(BlackListList)+1] = userList[i] +"\AppData" 
  EndFor 
  userList = "" 
EndSub

Sub ABS_blackList
  BlackListValue = 0 
  For iii = 1 To Array.GetItemCount(BlackListList) 
    If BlackListList[iii]  = DirReturn[ii] Then 
      BlackListValue = 1
    ElseIf Text.GetIndexOf( DirReturn[II] , ".git" ) <> 0 Then
      BlackListValue = 1
    EndIf 
  EndFor 
EndSub 