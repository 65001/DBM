'Copyrighted Software 2016. Abhishek Sathiabalan . All Rights Reserved. Governed by EULA. 

'v1000
'Initial Release
'v1100
'Import - Export Feature ; Functions Added ; Known Bugs : Crash upon Edit with too many lines
'v1101
'Log Data Base Implemented
'v1102
'Bug Fixes
'v1103
' Schema for DB file with more than one table implemented
'v1104
'Ability to switch between Tables in the same database | Possibly Unstable Feature
'Multiple Tables support
'v1105
'Schema system updated to use PRAGMA table_info(table_name);
'v1106
'Bug Fixes
'Allows you to export data to sql
'Changed Online EULA Path
'Changed order of program
'v1107
'Exports into HTML Tables
'v1108
'Import From CSV (Potentially Unstable)
'v1109
'Added Limited Support for Views ,  Indexes , and SQLite_master table through GUI
'v1110
'Attempt to refactor code . New Menu Interface 
'v1111
'Help Code
'New Settings Menu 
'v1112
'Refactored Code 
'Better Information Presented 
'Moved Around Things in the Menu 
'Update Function 
'v1113
'Bug Fixes 
'Logging Changes
'HTML Code Outputted is more stylized 

'v1114
' Transaction DB Implemented (Default is OFF )
'Partial Localization Implemtented . 
' 53 Languages are computer translated. English is the only verified and vetted Language currently 

'v1115
'Added Localization/Lang Folder which enables switching between languages to be nearly instant 

'______________________________________________________________________________
'                                                                                                 To do
'______________________________________________________________________________
'Dataview bug report | Dataview Crash Bug 
'Automatic Limiter on Dataview ? 
'Export Menu
'Access Table 
'Make the mastertable a view and remove the program only restrictions on it 
'Ability to load Mods ? 
'Localizations ?

GraphicsWindow.Show()
MainWindowID =  LDWindows.CurrentID
LDGraphicsWindow.ExitOnClose = "False"
LDGraphicsWindow.CancelClose = "True"
LDGraphicsWindow.Closing = Closing
'______________________________________________________________________________
'                                                                               Functions List 
'______________________________________________________________________________
logfunction = "Log"
QueryFunction = "Query"
CommandFunction = "Command" 
TransactionFunction = "TransactionRecord"
TrackDefaultTable = "TrackDefaultTable"

LDUtilities.ShowErrors = "False"
LDUtilities.ShowFileErrors= "False"
LDUtilities.ShowNoShapeErrors = "False"
LDEvents.Error = ErrorHandler

debug_mode = 0 '1=On;0=Off(Default)

copyrightDate = 2016
ProductID = "DBM"
PrgmVersionID = 1115
title = "Database Manager (" + ProductID + ") v" + PrgmVersionID + " " 
Self = Program.Directory +"\DB Manager Test.exe"

'______________________________________________________________________________
'                                                                                    Not to be set by Settings
'______________________________________________________________________________


DoubleQuotesCharacter = Text.GetCharacter(34)
XML_Version_Number ="1.0"
SQLFunctionsList = "1=AVG;2=COUNT;3=MAX;4=MIN;5=SUM;6=TOTAL;"
DB_Engines_Types = "1=MySQL;2=Odbc;3=Oledb;4=SQLite;5=SqlServer;" 
Engine_Mode = 4 

LOG_DB_SQL = "CREATE TABLE IF NOT EXISTS Log (ID Integer Primary Key,[UTC_DATE] TEXT,[UTC_TIME] TEXT,Date TEXT,Time TEXT,USER TEXT,ProductID TEXT,ProductVersion INTEGER,Type TEXT,Event TEXT);"
LOG_DB_SQL_View = "CREATE VIEW IF NOT EXISTS [LOCAL_TIME] AS SELECT ID,DATE,TIME,USER,PRODUCTID,PRODUCTVERSION,Type,Event From Log;CREATE VIEW IF NOT EXISTS [UTC_TIME] AS Select ID,UTC_DATE,UTC_TIME,USER,ProductID,ProductVersion,Type,Event From Log;"

Transactions_SQL = "CREATE TABLE IF NOT EXISTS Transactions (ID INTEGER PRIMARY KEY,UTC_DATE TEXT,UTC_TIME TEXT,USER TEXT,PATH TEXT,DB TEXT,SNAME TEXT,SQL TEXT,Type TEXT,Reason TEXT);"

'______________________________________________________________________________
'                                                               File Operations 
'______________________________________________________________________________
AssetPath = Program.Directory +"\Assets\"
logpath = AssetPath +"Log.txt"
LogDBpath = AssetPath +"Log.db"
TransactionDBpath = AssetPath +"Transactions.db" 
EULAFile = AssetPath +"EULA.txt"
settingspath = AssetPath+"setting.txt"
ModPath = AssetPath +"Mod\"
HelpPath = AssetPath +"HELP Table.html" 
LocalizationsFolder = Program.Directory +"\Localization\"
LocalizationsLangFolder = Program.Directory +"\Localization\Lang\"
LocalizationsFilesArray  =  File.GetFiles ( LocalizationsFolder ) 

IF LDFile.Exists(AssetPath) = "FALSE" Or LDFile.Exists(LocalizationsFolder) = "False" Or LDFile.Exists( ModPath ) = "False" Then 
  File.CreateDirectory(AssetPath)
  File.CreateDirectory(LocalizationsFolder ) 
  File.CreateDirectory(ModPath ) 
EndIf 

LOG_DB= LDDataBase.ConnectSQLite(LogDBpath) ' Creates Log DB if it does not exist 
TransactionDB = LDDataBase.ConnectSQLite( TransactionDBpath ) 

LDList.Add("DB_Path", LogDBpath ) 
LDList.Add("DB_Name", Log_DB ) 

LDList.Add("DB_Path", TransactionDBpath ) 
LDList.Add("DB_Name", TransactionDB ) 

LDDataBase.Command( TransactionDB , Transactions_SQL)
LDCall.Function4( CommandFunction , LOG_DB , LOG_DB_SQL,"App","Auto Creation Statements" ) 'Sadly Cannot be Localized 
LDCall.Function4( CommandFunction , LOG_DB , LOG_DB_SQL_View ,"App","Auto Creation Statements")'Sadly Cannot be Localized 
LDCall.Function4( CommandFunction , TransactionDB , Transactions_SQL ,"App","Auto Creation Statements") 'Sadly Cannot be Localized 

LogNumber = LDDataBase.Query( LOG_DB,"SELECT COUNT(ID) From Log;","","True")
LogNumber = LogNumber[1]["COUNT(ID)"]
LDCall.Function5(TransactionFunction , "App" , LOG_DB +"| LOG"  ,"SELECT COUNT(ID) From Log;" ,"Query", " Auto Query Log Count") 'Sadly Cannot be Localized 
TransactionNumber = LDDataBase.Query( TransactionDB,"SELECT COUNT(ID) From Transactions","","True") 
TransactionNumber = TransactionNumber[1]["COUNT(ID)"]

OnlineEULaPath = "https://drive.google.com/uc?export=download&id=0B2v4xbFnpKvRNTFKckFKLVNNUDg" 'EULA Path
OnlineDB_Refrence_Location = "https://docs.google.com/uc?id=0B2v4xbFnpKvRVmNVODZ4bnppd3c&export=download"

StartTime[1] = Clock.ElapsedMilliseconds
LDNetwork.DownloadFile(EULAFile,OnlineEULaPath)
EndTime[1] = Clock.ElapsedMilliseconds

LoadedFile = 0 
SortByMode = 1 
RestoreSettings = 0

CLLF = Text.GetCharacter(10) '+ Text.GetCharacter(13) 
TabKey = Text.GetCharacter(9) 
args = ""

'Gets EULA Version 
EULA_Version = LDText.Replace(File.ReadLine(EULAFile,1)," ","")
For I = 1 To Text.GetLength(EULA_Version)
  Character =  Text.GetSubText(EULA_Version,I,1) 
  If Character <> TabKey Then
    NEULA_Version = Text.Append(NEULA_Version, Character )
  EndIf
EndFor
EULA_Version = NEULA_Version
NEULA_Version =""

'______________________________________________________________________________
'                                                                                     End of No Settings Zone
'______________________________________________________________________________
LDCall.Function2( logfunction , "Program Started","Application") 'Sadly Cannot be Localized 
Startup()

Sub Startup
  LoadSettings()
  Localization_XML()
  If Program.ArgumentCount  = 1  Then
    GetPath()
    Load_DB()
  EndIf
  If  (EULA_Accepted = "True") And (EULA_Accepted_By = LDFile.UserName)  And (EULA_Version = EULA_Accepted_Version) And (VersionID = PrgmVersionID) Then
    StartTime[2] = Clock.ElapsedMilliseconds
    '   MannualUpdateCheck = 0 
    '   UpdateFunction()
    EndTime[2] = Clock.ElapsedMilliseconds 
    MainMenuUI()
  Else
    SaveSettings()
    EULA_UI()
  EndIf
EndSub

Sub Localization_XML 
  XML_Localization_Path = LocalizationsFolder + Localization_lang+".xml" 
  Localization_XML_DOC =  LDxml.Open(XML_Localization_Path)
  If LDFile.Exists(XML_Localization_Path ) Then 
    LDxml.FirstNode()
    LDxml.FirstChild()
    LDxml.LastChild()
    
    XML_Fetch_All()
    Localixation_XML_Private()
    While LDxml.PreviousSibling() = "SUCCESS"
      XML_Fetch_All()
      Localixation_XML_Private()
    EndWhile
  Else
    LDCall.Function2( logfunction , "Localization XML Missing","Application") 'DO NOT LOCALIZE EVER! 
  EndIf 
  
  LDLanguages = LDTranslate.Languages() 
  Localization_Temp = File.ReadContents( LocalizationsLangFolder +Localization_lang+".txt" ) 
  For I = 1 To Array.GetItemCount( LocalizationsFilesArray  )
    MLanguages[I] =  LDFile.GetFile( LocalizationsFilesArray[I] )
    Localization_List[ MLanguages[I] ]  = Localization_Temp[MLanguages[I]]
    LDList.Add("ISO_Lang", MLanguages[I] ) 
    LDList.Add("ISO_Text" , Localization_List[ MLanguages[I] ] ) 
  EndFor
EndSub 

Sub Localixation_XML_Private
  If XML_Array[1]["language"] = Localization_lang Then 
    LangList[ LDText.Replace( XML_Array[4] ,"_"," ") ] = XML_Array[6] 
  ElseIf debug_mode = 1 Then  
    TextWindow.WriteLine ("Recjected: " +  XML_Array ) 
  EndIf 
EndSub

Sub LoadSettings
  If RestoreSettings = 0 Then 
    Settings = File.ReadContents(settingspath)
  EndIf 
  Listview_Width = Settings["Listview_Width"]' 1000
  Listview_Height = Settings["Listview_Height"] '900
  VersionID = Settings["VersionID"] '1000
  lastFolder = Settings["LastFolder"]
  SupportedExtensions = Settings["Extensions"]
  deliminator = Settings["Deliminator"] 
  Transactions_mode = Settings["Transactions"] 
  Localization_lang = Settings["Language"] 
  
  EULA_Accepted = Settings["EULA"]
  EULA_Accepted_By = Settings["EULA_By"]
  EULA_Accepted_Version = Settings["EULA_Version"]
  
  If Listview_Height = "" Or Listview_Width = "" Or VersionID = "" Or lastFolder = "" Or SupportedExtensions = "" Or Localization_lang = "" OR Transactions_mode = "" Then 
    If Listview_Width = "" Then 
      TextWindow.WriteLine( "Width " ) 
      Settings["Listview_Width"] = 1600
      Listview_Width = Settings["Listview_Width"]
      RestoreSettings = 1 
    EndIf 
    If Listview_Height = "" Then 
      Settings["Listview_Height"] = 900
      TextWindow.WriteLine("Height " )
      Listview_Height = Settings["Listview_Height"] 
      RestoreSettings = 1 
    EndIf 
    If VersionID = "" Then
      Settings["VersionID"] = PrgmVersionID 
      TextWindow.WriteLine("VID") 
      VersionID = Settings["VersionID"]
      RestoreSettings = 1 
    EndIf
    If SupportedExtensions = "" Then 
      TextWindow.WriteLine("Extensions")
      Settings["Extensions"] = "1=db;2=sqlite;3=*;"
      SupportedExtensions = Settings["Extensions"]
      RestoreSettings = 1 
    EndIf 
    If Text.GetLength( Localization_lang ) =0 Then 
      TextWindow.WriteLine("Language") 
      Settings["Language"] = "en" 
      Localization_lang = "en" 
      RestoreSettings = 1 
    EndIf 
    If Transactions_mode = "" Then 
      TextWindow.WriteLine("Transactions")
      Settings["Transactions"] = 0 
      Transactions_mode = Settings["Transactions"] 
      RestoreSettings = 1 
    EndIf 
    If lastFolder = "" Then
      TextWindow.WriteLine("Folder" ) 
      Settings["LastFolder"] = LDFile.DocumentsFolder 
      lastFolder = Settings["LastFolder"]
      RestoreSettings = 1 
    EndIf 
    SaveSettings()
  EndIf 
EndSub

Sub SaveSettings
  status=  File.WriteContents(settingspath,Settings)
  If status = "FAILED" Then
    LDCall.Function2( logfunction ,"Failed to save settings","UI") 
    GraphicsWindow.ShowMessage(LangList["Failed Save Settings"] ,LangList["Error"]) 'Failed to Save Settings
  EndIf
EndSub

Sub GetPath
  If Program.ArgumentCount  = 1 AND LoadedFile = 0 Then
    databasepath = Program.getArgument(1)
    LoadedFile = 1 
  Else
    databasepath = LDDialogs.OpenFile(SupportedExtensions,lastFolder+"\")
  EndIf
EndSub

Sub Load_DB  
  If LDFile.Exists(databasepath) = "True" then
    database =  LDDataBase.ConnectSQLite(databasepath)
    LDCall.Function2(logfunction, "Program Started - OPENED : " + databasepath ,LangList["Application"])'//Localize
    Settings["LastFolder"] = LDFile.GetFolder(databasepath)
    SaveSettings()
    LDList.Add("DB_Path", databasepath ) 
    LDList.Add("DB_Name", database  ) 
  Else
    LDCall.Function2(logfunction, "Program Started - Failed to OPEN : " + databasepath,"Application" ) '//Localize
    GraphicsWindow.ShowMessage("File Could not be found or opened ", "Fatal Error" ) '//Localize
  Endif
EndSub

'______________________________________________________________________________
'                                                                                     EULA UI
'______________________________________________________________________________
Sub EULA_UI
  GraphicsWindow.Show()
  GraphicsWindow.Left = Desktop.Width / 3
  GraphicsWindow.Top = Desktop.Height / 4
  GraphicsWindow.Title = title + "EULA"
  
  defaultWidth = GraphicsWindow.Width
  defaultHeight= GraphicsWindow.Height
  
  ' GraphicsWindow.BackgroundColor = "LightGray"
  
  LDControls.RichTextBoxReadOnly = "True"
  eulatextbox =  LDControls.AddRichTextBox(600,350)
  Controls.Move(eulatextbox,10,10)
  LDControls.RichTextBoxReadOnly = "False"
  
  DowloandedFilePath = File.GetTemporaryFilePath()
  LDNetwork.DownloadFile(DowloandedFilePath ,OnlineEULaPath)
  OnlineEULACnts = File.ReadContents( DowloandedFilePath )
  OnlineEULACnts = LDText.Replace(OnlineEULACnts,"<date>",copyrightDate )
  
  If OnlineEULACnts = "" Then
    LDCall.Function2( logfunction ,LangList["Failed Load Online EULA"],LangList["UI"])
    GraphicsWindow.ShowMessage(LangList["Failed Load Online EULA"],LangList["Error"])
    EULAContents = Text.Append("This is the EULA that came with this program. This may not be the most latest EULA. Subject to General Part F the most latest EULA can be found here:" +Text.GetCharacter(10) + OnlineEULaPath ,File.ReadContents(EULAFile) )
  Else
    EULAContents = OnlineEULACnts
    File.WriteContents(EULAFile, EULAContents)
  EndIf
  
  If EULAContents = "" Then
    LDCall.Function2( logfunction , "NO EULA FOUND. Local or Online","UI")'//Localize 
    GraphicsWindow.ShowMessage("EULA could not be loaded. This program cannot start without its EULA." "EULA LOAD ERROR")'//Localize 
    Program.End()
  Else
    
    LDControls.RichTextBoxSetText(eulatextbox,EULAContents,"False")
    EULAContents = ""
    
    Ihaveread =  LDControls.AddCheckBox("I have read and agree to this EULA.")
    Controls.Move(Ihaveread,190,365)
    
    EULAaccept = Controls.AddButton("Accept",235,390)
    EULADecline = Controls.AddButton("Decline",235+80,390)
    
    Controls.SetSize(EULAaccept,70,30)
    Controls.SetSize(EULADecline,70,30)
    Controls.ButtonClicked = EULA_Handler
  EndIf
EndSub

Sub EULA_Handler
  LastClickedButton = Controls.LastClickedButton
  Settings["EULA_By"]  = LDFile.UserName
  Settings["EULA_Version"] = EULA_Version
  Settings["VersionID"] = PrgmVersionID
  If LDControls.CheckBoxGetState(Ihaveread) = "True" And LastClickedButton = EULAaccept Then
    Settings["EULA"] = "True"
    SaveSettings()
    MainMenuUI()
  ElseIf LastClickedButton = EULADecline Then
    LDCall.Function2( logfunction , "EULA Declined","UI")
    GraphicsWindow.ShowMessage("If you disagree with this EULA please delete this program","EULA Decline")
    Settings["EULA"] = "False"
    SaveSettings()
    Program.End()
  EndIf
EndSub

'______________________________________________________________________________
'                                                                                     Maine Menu UI
'______________________________________________________________________________

Sub MainMenuUI 
  GraphicsWindow.CanResize = "True"
  LDGraphicsWindow.ExitButtonMode(GraphicsWindow.Title,"Enabled")
  
  MenuList[LangList["File"]] = "Main"
  MenuList[LangList["Edit"]] = "Main"
  MenuList[LangList["View"]] = "Main"
  MenuList[LangList["Save"]] = "Main"
  MenuList[LangList["Import"]] = "Main"
  MenuList[LangList["Export"]] = "Main"
  MenuList[LangList["Settings"]] = "Main"
  
  MenuList[LangList["New"]] = LangList["File"]
  MenuList[LangList["Open"] ] = LangList["File"]
  MenuList["-"] = LangList["File"]
  MenuList[LangList["CSV"]] = LangList["Import"]
  MenuList[LangList["SQL"]] = LangList["Import"]
  MenuList["-"] = LangList["Import"]
  
  MenuList[LangList["CSV"] + " "] = LangList["Export"]
  MenuList[LangList["SQL"] +" "] = LangList["Export"]
  MenuList[LangList["PXML"] + " " ] = LangList["Export"]
  MenuList[LangList["HTML"] + " "] = LangList["Export"]
  MenuList["-"]= LangList["Export"]
  
  MenuList[LangList["Help"]] = LangList["Settings"]
  MenuList[LangList["About"]] = LangList["Help"]
  MenuList[LangList["Show Help"]] = LangList["Help"]
  MenuList["-"] = LangList["Help"]
  
  MenuList[LangList["Settings Editor"]] = LangList["Settings"]
  MenuList[LangList["Toggle Debug"]] =LangList["Settings"]
  MenuList[LangList["Toggle Transaction Log"]] = LangList["Settings"]
  MenuList[LangList["Refresh"]] = LangList["Settings"]
  MenuList[LangList["Check for Updates"]] = LangList["Settings"]
  MenuList["-"] = LangList["Settings"]
  
  ViewDB_Button = LangList["View"]
  NewDB_Button = LangList["New"]
  EditDB_Button = LangList["Edit"]
  OpenDB_Button = LangList["Open"]
  ImportCSV_Button = LangList["CSV"]
  ImportSQL_Button = LangList["SQL"]
  ExportCSV_Button = LangList["CSV"]+" "
  ExportSQL_Button = LangList["SQL"]+" "
  ExportXML_Button = LangList["PXML"] +" "
  ExportHTML_Button = LangList["HTML"]+" "
  SaveButton = LangList["Save"]
  SettingsButton = LangList["Settings Editor"]
  ToggleDebug_Button = LangList["Toggle Debug"]
  AboutButton = LangList["About"]
  ShowHelp = LangList["Show Help"]
  RefreshButton = LangList["Refresh"]
  CheckForUpdates = LangList["Check for Updates"]
  ToggleTransaction = LangList["Toggle Transaction Log"]
  
  If debug_mode = 1 Then 
    CheckList[ LangList["Toggle Debug"]] = "True"
    LDCall.Function2( logfunction , "Debug Mode is ON","UI")
  ElseIf debug_mode = 0 Then  
    CheckList[LangList["Toggle Debug"]] = "False"
  EndIf
  
  If Transactions_mode = 1 Then 
    CheckList[LangList["Toggle Transaction Log"]] = "True"
  ElseIf Transactions_mode = 0 Then
    CheckList[LangList["Toggle Transaction Log"]] = "False" 
  EndIf
  
  GraphicsWindow.Clear()
  LDGraphicsWindow.State = 2
  GraphicsWindow.Title = title + " " 
  
  Default_FontSize = GraphicsWindow.FontSize
  
  TypesOfSorts = "1=" + LangList["Table"] +";2=" +LangList["View"] +";3=" + LangList["Index"] +";4=" +LangList["Master Table"] +";" 
  
  Get_SCHEMA()
  SCHEMA_CurrentList = SCHEMA_TableList 
  
  GraphicsWindow.FontSize = 20
  Menu = LDControls.AddMenu(Desktop.Width,25,MenuList,"",CheckList) 
  LDControls.MenuClicked = MainMenuHandler
  
  Shapes.Move( Shapes.AddText(LangList["Sort"] +":") , 890 ,  1) 
  
  GraphicsWindow.FontSize = Default_FontSize
  TableCB =  LDControls.AddComboBox(SCHEMA_TableList,100,100)
  SortsCB =  LDControls.AddComboBox(TypesOfSorts,100,100)
  
  Controls.Move(TableCB,970,5)
  Controls.Move(SortsCB,1075,5) 
  
  LastClickedButton = ViewDB_Button 'Acts like a Function Call  
  MainMenuHandler()
  
  GraphicsWindow.Title = title + " " +LangList[ "Table" ] +": " + Default_Table 
  Ldcontrols.MenuClicked = MainMenuMenu
  LDControls.ComboBoxItemChanged = ComboBoxChanged
  Controls.ButtonClicked = MainMenuButton
  If debug_mode = 0 Then
    TextWindow.Hide()
  EndIf
  
EndSub

Sub MainMenuMenu
  LastClickedButton = LDControls.LastMenuItem
  MainMenuHandler()
EndSub

Sub MainMenuButton
  LastClickedButton = Controls.LastClickedButton
  MainMenuHandler() 
EndSub

Sub ComboBoxChanged
  LastClickedCB =  LDControls.LastComboBox
  LastCBIndex = LDControls.LastComboBoxIndex
  If LastClickedCB = TableCB Then 
    If  LDList.GetAt(TrackDefaultTable,LDList.Count(TrackDefaultTable)) <> LastCBIndex Then
      ' TextWindow.WriteLine( SCHEMA_TableList[ LDControls.LastComboBoxIndex ] )
      LDList.Add(TrackDefaultTable,LastCBIndex)
      Default_Table = SCHEMA_CurrentList[ LastCBIndex ]
      
      Get_SCHEMA_Private()
      Hide_Display_Results()
      List = SchemaList
      LDControls.ComboBoxContent(SortByCB ,SchemaList)
      LDControls.ComboBoxContent(SearchByCB, SchemaList )
      LDControls.ComboBoxContent(ColumnListCB, SchemaList )
      GraphicsWindow.Title = title + TypesOfSorts[SortByMode] +": "  + Default_Table
      LastClickedButton = ViewDB_Button
      MainMenuHandler()
    EndIf 
  ElseIf LastClickedCB = SortsCB Then 
    SortsCB_IndexList = "1="+SCHEMA_TableList+";2="+SCHEMA_ViewList+";3="+SCHEMA_IndexList+";"
    SortByMode = LastCBIndex 
    If LastCBIndex = 1 Then 
      Default_Table = SCHEMA_TableList[1]
      SCHEMA_CurrentList = SCHEMA_TableList
      LDControls.ComboBoxContent(TableCB, SCHEMA_TableList )
    ElseIf LastCBIndex = 2 Then 
      Default_Table = SCHEMA_ViewList[1]
      SCHEMA_CurrentList = SCHEMA_ViewList
      LDControls.ComboBoxContent(TableCB, SCHEMA_ViewList )
    ElseIf LastCBIndex = 3 Then
      Default_Table = SCHEMA_IndexList[1] 
      SCHEMA_CurrentList = SCHEMA_IndexList
      LDControls.ComboBoxContent(TableCB, SCHEMA_IndexList )
    ElseIf LastCBIndex = 4 then 
      Default_Table = "sqlite_master" 
      LastClickedButton = ViewDB_Button
      MainMenuHandler()
    EndIf 
    
    If (LastCBIndex = 1 OR LastCBIndex = 2 OR LastCBIndex = 3 Or LastCBIndex = 4)and Default_Table <> "" Then 
      
      LDList.Clear(TrackDefaultTable)
      LDList.Add(TrackDefaultTable,1)
      Get_SCHEMA_Private()
      Hide_Display_Results()
      List = SchemaList
      LDControls.ComboBoxContent(SortByCB ,SchemaList)
      LDControls.ComboBoxContent(SearchByCB, SchemaList )
      LDControls.ComboBoxContent(ColumnListCB, SchemaList )
      GraphicsWindow.Title = title + TypesOfSorts[SortByMode] +": "  + Default_Table
      LastClickedButton = ViewDB_Button
      MainMenuHandler()
      
      GraphicsWindow.Title = title + " "+ TypesOfSorts[SortByMode] +": "  + Default_Table
    Else
      LDCall.Function2(logfunction,"In the current database no "+LangList[ TypesOfSorts[SortByMode] ]+"s can be found.","UI") '//Localize  
      GraphicsWindow.ShowMessage("In the current database no "+ LangList[ TypesOfSorts[SortByMode] ] +"s can be found." , "Error" ) '//Localize 
    EndIf 
    
    If debug_mode = 1 Then  
      TextWindow.WriteLine("DEBUG: "+  LastCBIndex +":"+ TypesOfSorts[LastCBIndex] +":" + SortsCB_IndexList[LastCBIndex] +":" + Default_Table ) 
    EndIf 
  EndIf
EndSub

Sub MainMenuHandler
  Results_Search = 0
  Results_Sort = 0
  Results_Function = 0
  
  If debug_mode = 0 Then
    TextWindow.Hide()
  EndIf
  
  If LastClickedButton = NewDB_Button Then 'New Database
    NewFileSavePath =  LDDialogs.SaveFile("db",lastFolder)
    If NewFileSavePath <> "" Then
      lastFolder = LDFile.GetFolder(NewFileSavePath)
      SaveSettings()
      TextWindow.Write("Creation Statement:")
      UserSQL  = TextWindow.Read()
      
      LDCall.Function4( CommandFunction , LDDataBase.ConnectSQLite(NewFileSavePath)  , UserSQL ,LDFile.UserName ,"NEW DB") 
      LDCall.Function2(logfunction, "Created DB : " + NewFileSavePath,"Application")
      
      listview = "" 
      Dataview = "" 
      databasepath = NewFileSavePath 
      LoadSettings()
      Load_DB()
      SaveSettings()
      MainMenuUI()
    EndIf
  ElseIf LastClickedButton = EditDB_Button Then 'Edit Database List View
    If database <> "" Then 
      If SortByMode <> 4 Then 
        Controls.HideControl(listview)
        If Dataview = "" Then
          Dataview =  LDControls.AddDataView(Listview_Width,Listview_Height,"")
          'TextWindow.WriteLine(Dataview)
          Controls.Move(Dataview,10,35)
        Else
          Controls.ShowControl(Dataview)
        EndIf
        CurrentControl = Dataview
        LDDataBase.EditTable(database,Default_Table,CurrentControl)
        Hide_Display_Results()
      Else 
        LDCall.Function2(logfunction ,LangList["Master Table Protected"] , LangList["UI"]) 
        GraphicsWindow.ShowMessage(LangList[ "Error"] +":" + LangList["Master Table Protected"] ,LangList["Access Denied"])
      EndIf 
    Else 
      LDCall.Function2(logfunction ,LangList["Error No DB"]  , LangList["UI"])
      GraphicsWindow.ShowMessage(LangList["Error No DB"] ,LangList[ "Error" ])
    EndIf
  ElseIf LastClickedButton = ViewDB_Button Then 'View Database
    Controls.HideControl(Dataview)
    If listview = "" Then
      listview = LDDataBase.AddListView(Listview_Width,Listview_Height)
      Controls.Move(listview,10,35)
      Display_Results()
    Else
      Show_Display_Results()
      Controls.ShowControl(listview)
    EndIf
    CurrentControl = listview
    If Default_Table <> "" Then 
      LDCall.Function5(QueryFunction,"SELECT * FROM " + Default_Table +";",CurrentControl,"False" ,LangList["App"],LangList[ "View Function"])
    EndIf 
  ElseIf LastClickedButton = OpenDB_Button Then 'Opens a DB
    listview = ""
    Dataview = ""
    LoadSettings()
    GetPath()
    Load_DB()
    SaveSettings()
    MainMenuUI()
  Elseif LastClickedButton = SaveButton  Then 'Save Button   
    If database <> "" and Dataview <> "" Then 
      Save_Status = LDDataBase.SaveTable(database,Dataview)
      LDCall.Function2(logfunction ,"The save was : " + Save_Status , "UI" ) '//Localize 
      GraphicsWindow.ShowMessage("The save was : " + Save_Status,"Save Status !") '//Localize  
    Else 
      LDCall.Function2(logfunction ,"The Database or Dataview does not exist or have not yet been loaded", "UI" ) '//Localize  
      GraphicsWindow.ShowMessage("Error : The Database or Dataview does not exist or have not yet been loaded","Save Error") '//Localize 
    EndIf
  ElseIf LastClickedButton = SortButton Then 'Sort View
    Results_Sort = 1
    GenerateQuery()
  ElseIf LastClickedButton = SearchButton Then 'Search View
    Results_Search = 1
    GenerateQuery()
  ElseIF LastClickedButton = CustomQueryButton Then 'USER Custom Query SQL 
    LDCall.Function5(QueryFunction,Controls.GetTextBoxText(CustomQuery),CurrentControl,"False",LDFile.UserName,LangList["User Requested"])
  ElseIf LastClickedButton = CommandButton Then 'User Custom Run SQL 
    updated = LDCall.Function4(CommandFunction , database , Controls.GetTextBoxText(CustomQuery) , LDFile.UserName,LangList[ "User Requested" ]) 
    GraphicsWindow.ShowMessage(" " + updated + " number of rows were updated.","") '//Localize 
  ElseIf LastClickedButton = RunFunctionButton Then
    Results_Function = 1
    GenerateQuery()
  ElseIf LastClickedButton = ImportCSV_Button Then 'Imports CSV
    Import_CSV_Path = LDDialogs.OpenFile("csv","")
    I_CSV_Array = LDFile.ReadCSV(Import_CSV_Path)
    I_CSV_Name = LDText.Trim( LDText.Replace(LDFile.GetFile(Import_CSV_Path),"Table","") )
    For I = 1 to Array.GetItemCount(I_CSV_Array[1])
      I_CSV_Int_Array[I] = 1  
    EndFor 
    IMPORT_CSV()
    Import_CSV_Headers()
    records =  LDCall.Function4(CommandFunction , database,Import_CSV_SQL_Final , LDFile.UserName,"Import CSV") '//Localize  
    LDCall.Function2(logfunction, "Imported data into: " + databasepath+ " From " + Import_CSV_Path +" csv file","Application")'//Localize 
    GraphicsWindow.ShowMessage(records + " records updated","IMPORT") '//Localize  
    File.WriteContents(LDFile.GetFolder(databasepath)+"\CSV Import DUMP.sql", Import_CSV_SQL_Final ) 
  ElseIf LastClickedButton = ImportSQL_Button Then ' Imports SQL 
    CurrentFolder = LDFile.GetFolder(databasepath)
    records =  LDCall.Function4( CommandFunction , database, File.ReadContents( LDDialogs.OpenFile("sql",CurrentFolder  ) ) , LDFile.UserName ,"Import SQL") '//Localize 
    LDCall.Function2(logfunction, "Imported data into: " + databasepath +" From sql file","Application") '//Localize 
    GraphicsWindow.ShowMessage(records + " records updated","IMPORT") '//Localize 
  ElseIf LastClickedButton = ExportSQL_Button Then 
    Export_SQL_Dump_Fetch()
    Export_SQL_Dump_Write()
  ElseIf LastClickedButton = ExportCSV_Button Then
    TextWindow.WriteLine("")
    TextWindow.WriteLine("SELECT DATA TO WRITE IN " + LastClickedButton)
    TextWindow.Write(">")
    querycmd = TextWindow.Read()
    querycmd = Text.ConvertToLowerCase(querycmd)
    Export_CSV()
  ElseIf LastClickedButton = ExportXML_Button Then
    TextWindow.WriteLine("")
    TextWindow.WriteLine("SELECT DATA TO WRITE IN " + LastClickedButton)
    TextWindow.Write(">")
    querycmd = TextWindow.Read()
    querycmd = Text.ConvertToLowerCase(querycmd)
    Export_XML()
  ElseIf LastClickedButton = ExportHTML_Button Then
    Export_HTML()
  ElseIf LastClickedButton = ToggleDebug_Button Then 
    If debug_mode = 1 Then 
      debug_mode = 0
    ElseIf debug_mode = 0 Then
      debug_mode = 1
    EndIf 
  ElseIf LastClickedButton = AboutButton Then 
    GraphicsWindow.ShowMessage("DBM is a Database Mangement Program developed by Abhishek Sathiabalan. Copyright " + copyrightDate + ". All rights reserved." + CLLF + CLLF +"You are running : " + ProductID +" v" + VersionID ,"About") 'DO NOT LOCALIZE 
  ElseIf LastClickedButton = ShowHelp Then
    LDProcess.Start(HelpPath,"") 
  ElseIf LastClickedButton = SettingsButton Then 
    Settings_UI()
  ElseIf LastClickedButton = Setting_Save Then 
    Settings["Listview_Width"] = Controls.GetTextBoxText(Settings_WidthTB )
    Settings["Listview_Height"]= Controls.GetTextBoxText(Settings_HeigthTB )
    Settings["Extensions"] = Controls.GetTextBoxText(Settings_ExtensionsTB)
    Settings["Deliminator"] = Controls.GetTextBoxText( Settings_DeliminatorTB )
    Settings["Language" ] = LDList.GetAt("ISO_Lang", LDControls.ComboBoxGetSelected( Language_LB ) )
    Localization_lang = Settings["Language" ]
    SaveSettings()
    LoadSettings()
    
    'Sets it up so the Language Info can be reset 
    'LDList.Clear( LanguageLookUptable ) 
    'LDList.Clear( LanguageValueTable ) 
    LDList.Clear("ISO_Lang") 
    LDList.Clear("ISO_Text") 
    MenuList = ""
    CheckList= "" 
    
    Localization_XML() 
    LastClickedButton = Settings_Close 
    MainMenuHandler()
  ElseIf LastClickedButton = Settings_Close Then 
    listview = ""
    Dataview = ""
    MainMenuUI()
    ' ElseIf LastClickedButton = MoveRight Then 'Export UI Controls 
    
    ' ElseIf LastClickedButton = MoveLeft Then
    
    ' ElseIf LastClickedButton = NextButton Then 
    
  ElseIf LastClickedButton = RefreshButton Then 
    Get_SCHEMA()
  ElseIf LastClickedButton = CheckForUpdates Then 
    MannualUpdateCheck = 1 
    UpdateFunction()
  ElseIf LastClickedButton = ToggleTransaction Then
    If Transactions_mode = 1 Then 
      Transactions_mode = 0 
    ElseIf Transactions_mode = 0 Then 
      Transactions_mode = 1 
    EndIf 
    Settings["Transactions"] = Transactions_mode 
    SaveSettings()
  EndIf
  
  If LastClickedButton = ExportHTML_Button Or LastClickedButton = ExportCSV_Button Or LastClickedButton = ExportXML_Button or LastClickedButton = ExportSQL_Button Then
    'Export_UI() ' Not Yet Implemtented //TO DO 
    LDCall.Function2(logfunction, "Exported: " + databasepath+" | " +TypesOfSorts[ SortByMode ] +":" + Default_Table + " INTO " + LastClickedButton,LangList["Application"]) '//Localize 
    GraphicsWindow.ShowMessage("RAN EXPORT INTO " + LastClickedButton, LangList[ "Export"]) '//Localize  
  EndIf
EndSub

'______________________________________________________________________________
'                                                                                     Graphic Magic
'______________________________________________________________________________
Sub Hide_Display_Results
  default_Brush = GraphicsWindow.BrushColor
  GraphicsWindow.BrushColor = "WHITE"
  GraphicsWindow.FillRectangle( UIx -5 ,45 ,320 ,350)
  GraphicsWindow.BrushColor = default_Brush
  For I = 1 To Array.GetItemCount(Display_Results_MasterControlsList)
    Controls.HideControl(Display_Results_MasterControlsList[I] )
  EndFor
EndSub

Sub Show_Display_Results
  GraphicsWindow.DrawRectangle( UIx ,50 ,310 ,240)
  GraphicsWindow.FontSize = 15
  GraphicsWindow.DrawText( UIx + 100 , 52 ,LangList[ "Display Settings" ]) 
  GraphicsWindow.DrawText( UIx + 20 ,73 ,LangList["Sort by"])
  GraphicsWindow.DrawText( UIx + 100 , 150 , LangList["Search Settings"])
  GraphicsWindow.DrawText( UIx + 20,180,LangList["Search in"])
  GraphicsWindow.DrawText( UIx + 20,210,LangList["Search"] +":")
  For I = 1 To Array.GetItemCount(Display_Results_MasterControlsList)
    Controls.ShowControl(Display_Results_MasterControlsList[I] )
  EndFor
EndSub

Sub Display_Results
  
  GraphicsWindow.Width = Desktop.Width
  GraphicsWindow.Height = Desktop.Height
  GraphicsWindow.Left = 0
  GraphicsWindow.Top = 0
  UIx = Listview_Width + 50
  OrderByOptions = "1=ASC;2=DESC;"
  
  GraphicsWindow.DrawRectangle( UIx ,50 ,310 ,340)
  GraphicsWindow.FontSize = 15
  GraphicsWindow.DrawText( UIx + 100 , 52 , LangList["Display Settings"])
  GraphicsWindow.DrawText( UIx + 20 ,73 , LangList["Sort by"])
  GraphicsWindow.DrawText( UIx + 100 , 150 , LangList["Search Settings"])
  GraphicsWindow.DrawText( UIx + 20,180,LangList["Search in"])
  GraphicsWindow.DrawText( UIx + 20,210,LangList["Search"] +":")
  GraphicsWindow.DrawText( UIx + 127,290,LangList["Functions"] +":")
  
  GraphicsWindow.FontSize = 13
  List = Text.ConvertToUpperCase( SchemaList )
  FunctionList = ""
  
  'Sort
  SortByCB = LDControls.AddComboBox(List,100,100)
  AscDescString = "1=" + LangList["Asc"] +";2=" +LangList["Desc"]+";"
  ASCDESC_CB = LDControls.AddComboBox(AscDescString,110,100) 
  SortButton = Controls.AddButton(LangList["SORT"], UIx + 10 , 120)
  Controls.Move(SortByCB, UIx + 80 , 72 )
  Controls.Move(ASCDESC_CB,  UIx + 190, 72)
  Controls.SetSize(SortButton,290,25)
  
  
  'Search
  SearchByCB = LDControls.AddComboBox(List,200,120)
  SearchTextTB = Controls.AddTextBox(UIx + 100,210)
  StrictSearchCheckBox = LDControls.AddCheckBox(LangList["Strict Search"])
  SearchButton = Controls.AddButton(Text.ConvertToUpperCase( LangList["Search"] ),UIx +10,260)
  Controls.SetSize(SearchTextTB, 200, 25)
  Controls.SetSize(SearchButton,290,25)
  Controls.Move(StrictSearchCheckBox,UIx+20,240)
  Controls.Move(SearchByCB, UIx + 100 , 160 +20 )
  
  'Functions
  FunctionListCB =  LDControls.AddComboBox(SQLFunctionsList,130,100)
  Controls.Move( FunctionListCB , UIx + 10 , 310 )
  ColumnListCB = LDControls.AddComboBox(List,135,100)
  Controls.Move( ColumnListCB , UIx + 160 , 310 )
  
  RunFunctionButton = Controls.AddButton(Text.ConvertToUpperCase( LangList["Run Function"] ),UIx +10 , 340)
  Controls.SetSize( RunFunctionButton, 290 , 25 )
  
  'Custom Query
  CustomQuery =  Controls.AddMultiLineTextBox(UIx,420)
  Controls.SetSize(CustomQuery,310, 150)
  CustomQueryButton = Controls.AddButton(Text.ConvertToUpperCase( LangList[ "Query" ] ),UIx , 580) 
  Controls.SetSize(CustomQueryButton, 310 ,25)
  CommandButton =  Controls.AddButton(Text.ConvertToUpperCase( LangList["Command"] ) ,UIx, 580 +35)
  Controls.SetSize(CommandButton, 310 ,25)
  
  Controls.SetTextBoxText(CustomQuery,"This Textbox allows you to use Custom" +CLLF+" SQL Queries. Remove this and type in an SQL"+CLLF+" statement."+CLLF+"You also use it to export data") '//Localize ??
  
  Display_Results_MasterControlsList = "1="+SortByCB+";2="+ASCDESC_CB+";3="+SortButton+";4="+SearchByCB+";5="+SearchTextTB+";6="+StrictSearchCheckBox+";7="+SearchButton+";8="+CustomQuery+";9="+CustomQueryButton+";"
  Display_Results_MasterControlsList = Display_Results_MasterControlsList +"10="+CommandButton+";11="+FunctionListCB+";12="+ColumnListCB+";13="+RunFunctionButton+";"
EndSub

'Sub Export_UI 'Currently not in use 
'  ExportWinID = LDWindows.Create()
'  GraphicsWindow.Title = "Export"
'  LDGraphicsWindow.CancelClose = "True"
'  LDGraphicsWindow.ExitOnClose = "False"
'  LDGraphicsWindow.ExitButtonMode("Settings","Disabled")
'  
'  Export_Tables_UI = "" 
'  For I = 1 To Array.GetItemCount(SCHEMA_TableList ) 
'    Export_Tables_UI[ Array.GetItemCount(Export_Tables_UI) + 1] = SCHEMA_TableList[I] + " (T)"
'  EndFor 
'  
'  For I = 1 To Array.GetItemCount(SCHEMA_IndexList ) 
'    Export_Tables_UI[ Array.GetItemCount(Export_Tables_UI) + 1] = SCHEMA_IndexList[I] + " (I)"
'  EndFor
'  
'  For I = 1 To Array.GetItemCount(SCHEMA_ViewList ) 
'    Export_Tables_UI[ Array.GetItemCount(Export_Tables_UI) + 1] = SCHEMA_ViewList[I] + " (V)"
'  EndFor
'  
'  ExportListBox[1] = LDControls.AddListBox(Export_Tables_UI,200,200)
'  ExportListBox[2] = LDControls.AddListBox("",200,200)
'  Controls.Move(ExportListBox[1] , 1, 40 )
''  Controls.Move(ExportListBox[2] , 300,40 )
' 
' ToolTip[1] = Shapes.AddText("Tables / Views / Indexes" )
' ToolTip[2] = Shapes.AddText("Export Following:")
' Shapes.Move(ToolTip[1], 25 ,20 )
' Shapes.Move(ToolTip[2], 345,20 )
' 
' MoveRight =  Controls.AddButton(">",230,120)
' MoveLeft = Controls.AddButton("<",230,150)
' NextButton = Controls.AddButton("Next", 230,180 )
' Controls.SetSize( MoveRight ,50 , 25)
' Controls.SetSize( MoveLeft ,50 , 25)
' Controls.SetSize( NextButton , 50 , 25 )
'EndSub

Sub Settings_UI
  GraphicsWindow.Clear()
  GraphicsWindow.Title = LangList["Settings"]  
  
  GraphicsWindow.CanResize = "False"
  LDGraphicsWindow.CancelClose = "True"
  LDGraphicsWindow.ExitOnClose = "False" 
  LDGraphicsWindow.Closing = Closing 
  LDGraphicsWindow.ExitButtonMode(LangList["Settings"],"Disabled")
  
  GraphicsWindow.FontSize = 20
  
  GraphicsWindow.DrawText(10,30, LangList["Listview Width"]) 
  Settings_WidthTB = Controls.AddTextBox(200,25)
  
  GraphicsWindow.DrawText(10,65,LangList["Listview Height"]) 
  Settings_HeigthTB = Controls.AddTextBox(200, 60)
  
  GraphicsWindow.DrawText(10,100,LangList["Extensions"])
  Settings_ExtensionsTB = Controls.AddTextBox(200,95)
  
  GraphicsWindow.DrawText(10,135,LangList["Deliminator"]) 
  Settings_DeliminatorTB = Controls.AddTextBox(200,130)
  
  GraphicsWindow.DrawText(10,165,LangList["Language"])
  
  Language_LB = LDControls.AddComboBox(LDList.ToArray("ISO_Text") , 200,120 ) 
  LDControls.ComboBoxSelect( Language_LB , LDList.IndexOf("ISO_Lang", Localization_lang )  ) 
  Controls.Move( Language_LB , 200 , 165 )
  
  Setting_Save = Controls.AddButton(LangList[ "Save and Close"],50,220) 
  Settings_Close = Controls.AddButton(LangList["Close wo saving"] , 50, 270 )
  
  Controls.SetSize ( Setting_Save , 280 , 35 )
  Controls.SetSize ( Settings_Close , 280 , 35 )
  
  Controls.SetTextBoxText(Settings_WidthTB , Listview_Width )
  Controls.SetTextBoxText(Settings_HeigthTB, Listview_Height )
  Controls.SetTextBoxText(Settings_ExtensionsTB , Settings["Extensions"] )
  Controls.SetTextBoxText( Settings_DeliminatorTB , Settings["Deliminator"] ) 
  
  GraphicsWindow.FontSize = Default_FontSize 
EndSub
'______________________________________________________________________________
'                                                                                    Operations
'______________________________________________________________________________
Sub GenerateQuery
  SearchByGQ = LDControls.ComboBoxGetSelected(SearchByCB)
  OrderByGQ =  LDControls.ComboBoxGetSelected(SortByCB)
  SortOrder =  LDControls.ComboBoxGetSelected(ASCDESC_CB)
  StrictSearchChecked = LDControls.CheckBoxGetState(StrictSearchCheckBox)
  FunctionListGQ = LDControls.ComboBoxGetSelected( FunctionListCB )
  ColumnListGQ = LDControls.ComboBoxGetSelected( ColumnListCB)
  SearchTextGQ = Controls.GetTextBoxText(SearchTextTB)
  
  CMD = "" 'Techincally not needed , keep it in for clarity 
  CMD = "SELECT * FROM " +Default_Table +" "
  If Results_Sort = 1 Then
  ElseIf Results_Search = 1 Then
    SearchTextGQ = LDText.Replace(SearchByGQ,"'","''")
    CMD = CMD + "WHERE "+ List[SearchByGQ]
    If StrictSearchChecked = "False" Then ' Non Strict
      CMD = CMD +" LIKE '%" + Controls.GetTextBoxText(SearchTextTB)+"%' "
    Else 'Strict
      CMD = CMD +"='" + Controls.GetTextBoxText(SearchTextTB)+"' "
    EndIf
  ElseIf Results_Function = 1 Then
    CMD = ""
    CMD = "SELECT " + SQLFunctionsList[FunctionListGQ] +"(" + List[ColumnListGQ]+") FROM " +Default_Table +" "
  EndIf
  
  'Apply Sort Constraints
  CMD = CMD + "ORDER BY " + List[SearchByGQ] +" "
  If SortOrder = 1 Then
    CMD = CMD + "ASC;"
  ElseIf SortOrder = 2 Then
    CMD = CMD + "DESC;"
  EndIf
  
  LDCall.Function5(QueryFunction,CMD,CurrentControl,"False",LangList["App"],"Auto Generated Query on behalf of " + LDFile.UserName) '//Localize 
EndSub

Sub Get_SCHEMA
  If database <> "" Then 'Prevents Application from querying a nonexistent db 
    TableList = LDCall.Function5(QueryFunction,"SELECT tbl_name FROM sqlite_master WHERE type ='table';","","True",LangList["App"],"SCHEMA")
    ViewList  = LDCall.Function5(QueryFunction,"SELECT tbl_name FROM sqlite_master WHERE type ='view';","","True",LangList["App"],"SCHEMA")
    IndexList = LDCall.Function5(QueryFunction,"SELECT tbl_name FROM sqlite_master WHERE type ='index';","","True",LangList["App"],"SCHEMA")
    
    For I = 1 To Array.GetItemCount(TableList)
      SCHEMA_TableList[I] = TableList[I]["tbl_name"]
    EndFor
    
    For I = 1 To Array.GetItemCount(ViewList)
      SCHEMA_ViewList[I] = ViewList[I]["tbl_name"] 
    EndFor
    
    For I = 1 To Array.GetItemCount(IndexList)
      SCHEMA_IndexList[I] = IndexList[I]["tbl_name"] 
    EndFor
    
    Default_Table  = SCHEMA_TableList[1]
    LDList.Add(TrackDefaultTable,1)
    Get_SCHEMA_Private()
  EndIf 
EndSub

Sub Get_SCHEMA_Private 'Fetches the rows from the Current Table , Index, or View 
  SchemaList = ""
  LDList.Clear("SCHEMA")
  SCHEMA = LDCall.Function5(QueryFunction,"PRAGMA table_info("+Default_Table+");","","True",LangList["App"],"SCHEMA-PRIVATE") '//Localize 
  For Get_SCHEMA_I = 1 To Array.GetItemCount(SCHEMA)
    LDList.Add("SCHEMA",SCHEMA[Get_SCHEMA_I]["name"] )
  EndFor
  SchemaList= LDList.ToArray("SCHEMA")
EndSub

'______________________________________________________________________________
'                                                                                    EXPORT
'______________________________________________________________________________
Sub Export_CSV
  TextWindow.WriteLine("")
  
  If deliminator = "" then
    LDUtilities.CSVDeliminator = "," 
  Else
    LDUtilities.CSVDeliminator = deliminator
  EndIf
  
  return =  LDCall.Function5(QueryFunction,querycmd,"","True",LangList["App"],"EXPORT CSV ON BEHALF OF " + LDFile.UserName) '//Localize 
  csvdata = return 
  
  return2 = Array.GetAllIndices(return)
  return2 = return [return2[1] ]
  return2 = Array.GetAllIndices(return2)
  
  csvpath = LDFile.GetFolder(databasepath) +"\" +  Default_Table + " Table.csv"
  
  
  For i = 1 To Array.GetItemCount(return2) 'Gets Column Names  Headers
    csvdata[0][i] =  return2[i]
  EndFor
  
  For i = 0 To Array.GetItemCount(csvdata) + 1 'Puts Column Names into Data
    csvdataREAL[i+1] = csvdata[i]
  EndFor
  
  LDFile.WriteCSV(csvpath,csvdataREAL )
  csvdata = ""
EndSub

Sub Export_XML
  debug_mode = 1 
  EXPORTDATA = LDCall.Function5(QueryFunction,querycmd,"","True",LangList["App"],"Export XML on behalf of " + LDFile.UserName ) '//Localize 
  TextWindow.WriteLine ( EXPORTDATA ) 
  XML_Path = LDFile.GetFolder(databasepath) +"\" +  Default_Table + " Table.xml"
  File.DeleteFile(XML_Path)
  XML_Createment_Statement = "<?xml version=" +DoubleQuotesCharacter+ XML_Version_Number+DoubleQuotesCharacter+" encoding="+DoubleQuotesCharacter+ "UTF-8"+DoubleQuotesCharacter+" standalone="+DoubleQuotesCharacter+"yes" + DoubleQuotesCharacter +"?>"
  XML_Createment_Statement = XML_Createment_Statement +"<root></root>"
  File.AppendContents(XML_Path,XML_Createment_Statement)
  XML_Document = LDxml.Open(XML_Path)
  XML_Parent = LDxml.Parent()
  LDxml.FirstChild()
  GO = 1
  XML_Fetch_All()
  While 1 = GO
    If XML_Array[5] = "XmlDeclaration" Or XML_Array[5] ="root" Then 'Ignores Root and XMLDeclaration
      LDxml.NextSibling()
      XML_Fetch_All()
    Else
      XML_Write()
      LDxml.Save(XML_Path)
      GO = 0
    EndIf
  EndWhile
EndSub

Sub XML_Fetch_All
  XML_Array[1] = LDxml.Attributes
  XML_Array[2] = LDxml.AttributesCount
  XML_Array[3] = LDxml.ChildrenCount
  XML_Array[4] = LDxml.NodeName
  XML_Array[5] = LDxml.NodeType
  XML_Array[6] = LDxml.NodeInnerText 
  
  XML_Array_SCHEMA ="1=Attributes:;2=Attribute Count:;3=Children count:;4=Node Name:;5=Node Type:;"
EndSub

Sub XML_Write 'Writes Data Out. Currently all data is stuck under the 1st record instead of their respective records.
  For I = 1 To Array.GetItemCount(EXPORTDATA)
    data["id"]=I
    LDxml.AddNode("record",data,"","Append")
    Child = LDxml.LastChild()
    For II = 1 To Array.GetItemCount(EXPORTDATA[I])
      LDxml.AddNode(SchemaList[II],"",EXPORTDATA[I][SchemaList[II]],"Append")
    EndFor
    LDxml.Parent()
  EndFor
EndSub

Sub Export_SQL_Dump_Fetch
  LDList.Clear("EXPORT_SQL")
  Export_SQL_DUMP_SCHEMA = LDCall.Function5(QueryFunction,"PRAGMA table_info("+Default_Table+");","","True",LangList["App"],"Export SQL - SCHEMA - On behalf of " + LDFile.UserName) '//Localize 
  EXPORT_SQL_DATA = LDCall.Function5(QueryFunction,"Select * FROM "+Default_Table+";","","True",LangList["App"],"Export SQL - SQL - On behalf of " + LDFile.UserName)'//Localize 
  EXPORT_SQL_PATH = LDFile.GetFolder(databasepath) +"\" +  Default_Table + " " + TypesOfSorts[SortByMode] +".sql"
  
  For Export_SQL_I = 1  To Array.GetItemCount(SCHEMA)
    LDList.Add("EXPORT_SQL",SCHEMA[Export_SQL_I]["type"] ) 'Type of Data 
  EndFor
  Export_SQL_DUMP_SCHEMA = LDList.ToArray("EXPORT_SQL")
EndSub

Sub Export_SQL_DUMP_WRITE
  'Generates Create Table Schema with proper Schema
  Dump_SQL = "CREATE TABLE " + Default_Table +"("
  For Export_SQL_I = 1 To Array.GetItemCount(SCHEMA)
    DUMP_SQL = DUMP_SQL + SchemaList[Export_SQL_I] +" " + Export_SQL_DUMP_SCHEMA[Export_SQL_I]
    If Export_SQL_I < Array.GetItemCount(SchemaList) Then
      DUMP_SQL = DUMP_SQL +","
    EndIf
  EndFor
  
  DUMP_SQL = DUMP_SQL +");"
  'Exports Data from SQL Table
  For Export_SQL_I = 1 To Array.GetItemCount(EXPORT_SQL_DATA)
    DUMP_SQL = DUMP_SQL +"INSERT INTO " +Default_Table + " VALUES ('"
    For Export_SQL_II = 1 To Array.GetItemCount(EXPORT_SQL_DATA[Export_SQL_I])
      DUMP_SQL =DUMP_SQL + LDText.Replace(EXPORT_SQL_DATA[Export_SQL_I][SchemaList[Export_SQL_II]],"'","''")
      If Export_SQL_II < Array.GetItemCount(SchemaList) Then
        DUMP_SQL = DUMP_SQL +"','"
      EndIf
    EndFor
    DUMP_SQL = DUMP_SQL +"');" + CLLF
  EndFor
  File.WriteContents(EXPORT_SQL_PATH,DUMP_SQL)
EndSub

Sub Export_HTML
  Export_HTML_SCHEMA = LDCall.Function5(QueryFunction,"PRAGMA table_info("+Default_Table+");","","True",LangList["App"],"Export HTML SCHEMA on behalf of " + LDFile.UserName) '//Localize 
  EXPORT_HTML_DATA = LDCall.Function5(QueryFunction,"Select * FROM "+Default_Table+";","","True",LangList["App"],"Export HTML DATA on behalf of " + LDFile.UserName ) '//Localize 
  EXPORT_HTML_PATH = LDFile.GetFolder(databasepath) +"\" +  Default_Table + " "+ TypesOfSorts[SortByMode] +".html"
  
  HTML_Statement = "" 
  HTML_Statement = "<!DOCTYPE html>"+CLLF+"<html>"+CLLF+TabKey+"<title>" + Default_Table +" Exported</title>" +CLLF + CLLF
  HTML_Statement = HTML_Statement + TabKey+"<head>"+CLLF+TabKey+TabKey+"<style>"+CLLF+TabKey+TabKey+TabKey+"table, td, th {border: 1px solid #ddd;text-align: left;}" +CLLF+TabKey+TabKey+TabKey+"table {border-collapse: collapse; width: 100%;}" +CLLF+TabKey+TabKey+TabKey+"th,td {padding: 15px;}" 
  HTML_Statement = HTML_Statement + CLLF+TabKey+TabKey+TabKey+ "tr:hover{background-color:#f5f5f5}" +CLLF+TabKey+TabKey+TabKey+"th,td#Main {background-color: #4CAF50;color: white;font-size:120%;border:0px;text-align:center}"
  HTML_Statement = HTML_Statement + CLLF+TabKey+TabKey+"</style>"+CLLF+TabKey+TabKey +"<meta charset = " + DoubleQuotesCharacter +"UTF-8" + DoubleQuotesCharacter +">" + CLLF
  HTML_Statement = HTML_Statement + TabKey +TabKey +"<meta name="+DoubleQuotesCharacter+"generator"+ DoubleQuotesCharacter + " content=" +DoubleQuotesCharacter + "DBM v" + PrgmVersionID + DoubleQuotesCharacter +">" + CLLF 
  HTML_Statement = HTML_Statement + TabKey+ TabKey +"<!-- DMB is developed by Abhishek Sathiabalan. LINK: https://docs.google.com/uc?id=0B2v4xbFnpKvRNUg5UmVzeGxOcGs&export=download -->" + CLLF 
  HTML_Statement = HTML_Statement + TabKey +"</head>" + CLLF + CLLF  
  HTML_Statement = HTML_Statement + TabKey +"<body>" + CLLF + TabKey+ TabKey + "<div style="+ DoubleQuotesCharacter + "overflow-x:auto;" + DoubleQuotesCharacter+">" + CLLF + Tabkey +TabKey + TabKey +"<table>"
  HTML_Statement = HTML_Statement + CLLF + TabKey+TabKey+Tabkey+Tabkey+ "<tr> "  +CLLF + TabKey+TabKey+Tabkey+Tabkey+ TabKey + "<td id = " +DoubleQuotesCharacter +"Main"+ DoubleQuotesCharacter +" + colspan = " + DoubleQuotesCharacter + Array.GetItemCount(Export_HTML_SCHEMA ) + DoubleQuotesCharacter +">" + Default_Table +"</td>"
  HTML_Statement = HTML_Statement + CLLF + TabKey+TabKey+Tabkey+Tabkey+"</tr>" +CLLF + TabKey+TabKey+Tabkey+Tabkey+ "<tr>"+CLLF 
  
  For EXPORT_HTML_I = 1 To  Array.GetItemCount(Export_HTML_SCHEMA)
    HTML_Statement = HTML_Statement + TabKey +TabKey +TabKey +TabKey +TabKey + "<th>" + Export_HTML_SCHEMA[EXPORT_HTML_I]["name"] +"</th>" + CLLF
  EndFor 
  HTML_Statement = HTML_Statement +TabKey +TabKey+Tabkey+Tabkey+"</tr>" +CLLF
  
  For EXPORT_HTML_I = 1 To Array.GetItemCount(EXPORT_HTML_DATA)
    HTML_Statement = HTML_Statement +TabKey+TabKey+Tabkey+Tabkey+"<tr>"+CLLF
    For EXPORT_HTML_II = 1 To Array.GetItemCount(Export_HTML_SCHEMA)
      HTML_Statement = HTML_Statement +TabKey + TabKey +TabKey +TabKey +TabKey +"<td>" + EXPORT_HTML_DATA[EXPORT_HTML_I][Export_HTML_SCHEMA[EXPORT_HTML_II]["name"]] +"</td>" + CLLF
    EndFor
    HTML_Statement = HTML_Statement +TabKey + TabKey+Tabkey+Tabkey+"</tr>"+CLLF 
  EndFor
  HTML_Statement = HTML_Statement +TabKey + TabKey +TabKey+"</table>"+CLLF+TabKey + TabKey+"</div>"+CLLF+TabKey +"</body>"+CLLF+"</html>"
  File.WriteContents(EXPORT_HTML_PATH,HTML_Statement)
EndSub
'______________________________________________________________________________
'                                                                                    IMPORT
'______________________________________________________________________________

Sub IMPORT_CSV
  Import_CSV_SQL = "" 
  For I = 2 To Array.GetItemCount(I_CSV_Array) 'I=1 is Assumed to be the header row
    Import_CSV_SQL = Import_CSV_SQL + "INSERT INTO " + I_CSV_Name + " VALUES ('"
    CSV_Array_TempIndex = Array.GetAllIndices( I_CSV_Array[I] )
    For II = 1 To Array.GetItemCount(I_CSV_Array[I])
      CSV_Array_Temp =  I_CSV_Array[I][ CSV_Array_TempIndex[II] ]
      CSV_Array_Temp = LDText.Replace( CSV_Array_Temp , "'", "''")
      
      Import_CSV_SQL =  Import_CSV_SQL+ CSV_Array_Temp
      
      If CSV_Array_Temp <> 0 And Math.SquareRoot(CSV_Array_Temp) = 0 Then
        CSV_Int_Array[II] = 0 
      EndIf 
      
      If II < Array.GetItemCount(I_CSV_Array[i]) Then 
        Import_CSV_SQL = Import_CSV_SQL + "','"
      EndIf
      
    EndFor
    
    Import_CSV_SQL = Import_CSV_SQL + "');" + Text.GetCharacter(10)
  EndFor
EndSub

Sub Import_CSV_Headers
  ' LDClipboard.SetText(Import_CSV_SQL)
  
  Import_CSV_HSQL = "CREATE TABLE IF NOT EXISTS " + I_CSV_Name +" ("
  Temp_Index = Array.GetAllIndices(I_CSV_Array[1])
  
  For I = 1 To Array.GetItemCount(I_CSV_Array[1])
    Import_CSV_HSQL = Import_CSV_HSQL +I_CSV_Array[1][I] + " " 
    If CSV_Int_Array[I] = 1 Then 
      Import_CSV_HSQL = Import_CSV_HSQL +"INTEGER"
    Else 
      Import_CSV_HSQL = Import_CSV_HSQL +"TEXT"
    EndIf 
    
    If I < Array.GetItemCount(I_CSV_Array[1]) Then 
      Import_CSV_HSQL = Import_CSV_HSQL + ","
    EndIf
    
  EndFor
  Import_CSV_HSQL = Import_CSV_HSQL + ");"+ Text.GetCharacter(10)
  Import_CSV_SQL_Final =  Text.Append( Import_CSV_HSQL, Import_CSV_SQL)
EndSub
'______________________________________________________________________________
'                                                                                          MOD
'______________________________________________________________________________
Sub MOD_XML
  
EndSub

Sub MOD_READ
  
EndSub

Sub MOD_RUN
  
EndSub 

'______________________________________________________________________________
'                                                                                     Query
'______________________________________________________________________________
Sub Query
  QueryArgs = args
  If database <> "" Then 
    If Text.IsSubText(QueryArgs[5] , "SCHEMA" ) <> "True" Then 
      LDCall.Function5( TransactionFunction, QueryArgs[4] , database , QueryArgs[1] , "Query" , QueryArgs[5] ) 
    EndIf
    return  =  LDDataBase.Query(database,Queryargs[1],Queryargs[2],Queryargs[3])
  Else 
    LDCall.Function2(logfunction ,"Query Error : No Database has been loaded", LangList["UI"] ) '//Localize 
    GraphicsWindow.ShowMessage("Error : No Database has been loaded" , "Query Error " ) '//Localize 
  EndIf 
EndSub

'______________________________________________________________________________
'                                                                                     Database Command 
'______________________________________________________________________________

Sub Command 'Runs A Command Function 
  CommandArgs = args 
  If args[1] <> "" Then 
    LDCall.Function5( TransactionFunction , CommandArgs[3] , CommandArgs[1], CommandArgs[2] ,"CMD", CommandArgs[4] ) 
    return = LDDataBase.Command(CommandArgs[1] ,LDText.Trim( CommandArgs[2] ) )
  Else 
    LDCall.Function2(logfunction ,LangList["Command"] + LangList["Error No DB"] , LangList["UI"])
    GraphicsWindow.ShowMessage("Error : No Database has been loaded" , LangList["Command"] + " " + LangList["Error"] ) '//Localize 
  EndIf
EndSub

Sub TransactionRecord
  If Transactions_mode = 1 Then 
    Transaction_DB_Path_Temp = LDList.GetAt("DB_Path",  LDList.IndexOf("DB_Name",args[2] ) )
    Transactions_SQL = "INSERT INTO Transactions (USER,DB,SQL,TYPE,Reason,UTC_DATE,UTC_TIME,PATH,SNAME) VALUES('"+args[1] +"','"+args[2]+"','"+ LDText.Replace(args[3],"'","''")+"','"+args[4]+"','"+ args[5]+"',Date(),TIME(),'" + Transaction_DB_Path_Temp+"','"+ LDFile.GetFile(Transaction_DB_Path_Temp) +"');" 
    LDDataBase.Command( TransactionDB , Transactions_SQL )  
  EndIf 
EndSub 

'______________________________________________________________________________
'                                                                                     Logging
'______________________________________________________________________________
Sub Closing
  If databasepath = "" Then 
    LDCall.Function2(logfunction, "Program Closing ","Application") '//Localize 
  Else 
    LDCall.Function2(logfunction, "Program Closing - Closing : " + databasepath ,"Application") '//Localize 
  EndIf 
  Program.End()
EndSub

Sub ErrorHandler
  TextWindow.WriteLine( LDEvents.LastError )
  LDCall.Function2(logfunction, LDEvents.LastError ,"System" )'//Localize 
EndSub

Sub Log
  LogEvent = args[1]
  TypeofError = args[2] 
  If TypeofError = "Debug" And debug_mode = 0 Then 'DO NOT STORE IF TRUE 
  Else 
    If TypeofError = "" Then 
      TypeofError = "Unknown"
    EndIf 
    
    If debug_mode = 1 Then 
      If Text.StartsWith(LogEvent,"LDDataBase.Query") = "True" Then 
        TextWindow.WriteLine(QueryArgs )
      ElseIf Text.StartsWith(LogEvent,"LDDataBase.Command") = "True" Then
        TextWindow.WriteLine( CommandArgs ) 
      EndIf 
    EndIf 
    
    LogNumber = LogNumber + 1
    return = File.AppendContents(logpath,Clock.Date + "|" + Clock.Time +"|" + LDFile.UserName +"|" + ProductID +"|"+ VersionID+"|"+   LogEvent)
    LOG_CMD = "INSERT INTO LOG (ID,UTC_DATE,UTC_TIME,DATE,TIME,USER,ProductID,ProductVersion,Event,Type) VALUES('"+LogNumber+"',DATE(),TIME(),DATE('now','localtime'),TIME('now','localtime'),'"+LDFile.UserName+"','"+ProductID+"','"+PrgmVersionID+"','"+LogEvent+"','"+TypeofError+"');"
    LDCall.Function4( CommandFunction , LOG_DB , LOG_CMD , "App" ,"Auto Log") '//Localize 
  EndIf 
EndSub

'______________________________________________________________________________
'                       Update Function
'______________________________________________________________________________

Sub UpdateFunction
  UpdateDownload()
  UpdateUI()
EndSub

Sub UpdateDownload
  UpdaterDB = AssetPath+"Updater.db"
  
  If LDNetwork.DownloadFile(UpdaterDB,OnlineDB_Refrence_Location) <> "-1" Then 
    UpdaterDB =  LDDataBase.ConnectSQLite(UpdaterDB)
    QueryItems =  LDDataBase.Query(UpdaterDB,"SELECT * FROM updates WHERE PRODUCTID =" + "'"+PRODUCTID + "';" ,"","True") 
    
    LatestVersion = QueryItems[1]["VERSION"]
    DownloadLocation = QueryItems[1]["URL"] 
  Else
    GraphicsWindow.ShowMessage("An Error has occured. Please check the log for details.","Error") '//Localize 
  EndIf 
EndSub 

Sub UpdateUI
  If LatestVersion = PrgmVersionID And MannualUpdateCheck = 1 Then 
    LDCall.Function2(logfunction ,"No Update Available", "UI" ) 
    GraphicsWindow.ShowMessage("There are no updates available","No Updates") '//Localize 
  ElseIf PrgmVersionID  > LatestVersion AND MannualUpdateCheck = 1 Then 
    LDCall.Function2(logfunction ,"You have early beta version of the program", "UI" ) '//Localize 
    GraphicsWindow.ShowMessage("You have a more recent edition of the program than that offered to the public." + CLLF + " You have version " + PrgmVersionID  + " while the most recent public release is version " + LatestVersion,"No Updates") '//Localize 
  ElseIf (PrgmVersionID  < LatestVersion) Then 
    If   ( LDDialogs.Confirm("Do you wish to download Version " + LatestVersion + "? You have Version " + PrgmVersionID ,"Download Update") = "Yes" ) Then '//Localize 
      LDCall.Function2(logfunction ,"Starting Download of Update", "UI" )   '//Localize 
      DownloadUpdate()  
    EndIf  
  EndIf 
EndSub

Sub DownloadUpdate
  
  DownloadFolder = "" 
  While DownloadFolder = "" 
    GraphicsWindow.ShowMessage("You will be prompted to select the download location.","Download Location") '//Localize 
    DownloadFolder =  LDDialogs.SaveFile("1=zip;2=*","C:\Users\"+LDFile.UserName)
  EndWhile 
  
  UpdaterSize = LDNetwork.DownloadFile(DownloadFolder,DownloadLocation) 
  
  If UpdaterSize <> "-1" then 
    LDCall.Function2(logfunction ,"Dowloaded update to : " + DownloadFolder, "UI" ) '//Localize 
    GraphicsWindow.ShowMessage("SUCCESS","Update Downloaded")'//Localize 
  Else
    GraphicsWindow.ShowMessage("An Error has occured. Please check the log for details.","Error") '//Localize 
  EndIf 
  
EndSub 